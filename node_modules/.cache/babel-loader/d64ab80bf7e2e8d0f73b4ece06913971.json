{"remainingRequest":"/Users/dashuaige/artminda/myweb/node_modules/babel-loader/lib/index.js!/Users/dashuaige/artminda/myweb/node_modules/vuetify-loader/lib/loader.js!/Users/dashuaige/artminda/myweb/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/dashuaige/artminda/myweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/dashuaige/artminda/myweb/src/components/3d_ball.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/dashuaige/artminda/myweb/src/components/3d_ball.vue","mtime":1593338198548},{"path":"/Users/dashuaige/artminda/myweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dashuaige/artminda/myweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/dashuaige/artminda/myweb/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/Users/dashuaige/artminda/myweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/dashuaige/artminda/myweb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.float32-array\";\n//\n//\n//\n//\nimport * as THREE from \"three\"; // import Stats from \"./stats.module.js\";\n// import { GUI } from \"./dat.gui.module.js\";\n// import { OrbitControls } from './OrbitControls.js';\n\nimport { OBJLoader, MTLLoader } from \"three-obj-mtl-loader\"; // import MTLLoader from  'three-mtl-loader';\n// import OBJLoader from  'three-obj-loader';\n\nimport { CSS2DRenderer, CSS2DObject } from \"three-css2drender\";\n\nvar OrbitControls = require(\"three-orbit-controls\")(THREE);\n\nexport default {\n  name: \"Home\",\n  data: function data() {\n    return {\n      group: \"\",\n      container: \"\",\n      stats: \"\",\n      particlesData: [],\n      camera: \"\",\n      scene: \"\",\n      renderer: \"\",\n      positions: \"\",\n      colors: \"\",\n      particles: \"\",\n      pointCloud: \"\",\n      particlePositions: \"\",\n      linesMesh: \"\",\n      maxParticleCount: 1000,\n      particleCount: 300,\n      r: 800,\n      rHalf: 100 / 2,\n      effectController: {\n        showDots: false,\n        showLines: true,\n        minDistance: 150,\n        limitConnections: false,\n        maxConnections: 8,\n        particleCount: 345\n      }\n    };\n  },\n  methods: {\n    // initGUI(){\n    //   var gui = new GUI();\n    //   gui.add(this.effectController, this.effectController.showDots).onChange(function(value) {\n    //     pointCloud.visible = value;\n    //   });\n    //   gui.add(this.effectController, this.effectController.showLines).onChange(function(value) {\n    //     linesMesh.visible = value;\n    //   });\n    //   gui.add(this.effectController, this.effectController.minDistance, 10, 300);\n    //   gui.add(this.effectController, this.effectController.limitConnections);\n    //   gui.add(this.effectController, this.effectController.maxConnections, 0, 30, 1);\n    //   gui\n    //     .add(this.effectController, this.effectController.particleCount, 0, maxParticleCount, 1)\n    //     .onChange(function(value) {\n    //       particleCount = parseInt(value);\n    //       particles.setDrawRange(0, particleCount);\n    //     });\n    // },\n    init: function init() {\n      //   this.initGUI();\n      this.container = document.getElementById(\"container\");\n      this.camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 1, 4000);\n      this.camera.position.z = 2000;\n      var controls = new OrbitControls(this.camera, this.container);\n      this.scene = new THREE.Scene();\n      this.group = new THREE.Group();\n      this.scene.add(this.group);\n      var helper = new THREE.BoxHelper(new THREE.Mesh(new THREE.BoxBufferGeometry(this.r, this.r, this.r)));\n      helper.material.color.setHex(0x101010);\n      helper.material.blending = THREE.AdditiveBlending;\n      helper.material.transparent = true;\n      this.group.add(helper);\n      var segments = this.maxParticleCount * this.maxParticleCount;\n      this.positions = new Float32Array(segments * 3);\n      this.colors = new Float32Array(segments * 3);\n      var pMaterial = new THREE.PointsMaterial({\n        color: 0x222222,\n        size: 3,\n        blending: THREE.AdditiveBlending,\n        transparent: true,\n        sizeAttenuation: false\n      });\n      this.particles = new THREE.BufferGeometry();\n      this.particlePositions = new Float32Array(this.maxParticleCount * 3);\n\n      for (var i = 0; i < this.maxParticleCount; i++) {\n        var x = Math.random() * this.r - this.r / 2;\n        var y = Math.random() * this.r - this.r / 2;\n        var z = Math.random() * this.r - this.r / 2;\n        this.particlePositions[i * 3] = x;\n        this.particlePositions[i * 3 + 1] = y;\n        this.particlePositions[i * 3 + 2] = z; // add it to the geometry\n\n        this.particlesData.push({\n          velocity: new THREE.Vector3(-1 + Math.random() * 2, -1 + Math.random() * 2, -1 + Math.random() * 2),\n          numConnections: 0\n        });\n      }\n\n      this.particles.setDrawRange(0, this.particleCount);\n      this.particles.setAttribute(\"position\", new THREE.BufferAttribute(this.particlePositions, 3).setUsage(THREE.DynamicDrawUsage)); // create the particle system\n\n      this.pointCloud = new THREE.Points(this.particles, pMaterial);\n      this.group.add(this.pointCloud);\n      var geometry = new THREE.BufferGeometry();\n      geometry.setAttribute(\"position\", new THREE.BufferAttribute(this.positions, 3).setUsage(THREE.DynamicDrawUsage));\n      geometry.setAttribute(\"color\", new THREE.BufferAttribute(this.colors, 3).setUsage(THREE.DynamicDrawUsage));\n      geometry.computeBoundingSphere();\n      geometry.setDrawRange(0, 0);\n      var material = new THREE.LineBasicMaterial({\n        vertexColors: THREE.VertexColors,\n        blending: THREE.AdditiveBlending,\n        transparent: true\n      });\n      this.linesMesh = new THREE.LineSegments(geometry, material);\n      this.group.add(this.linesMesh); //\n\n      this.renderer = new THREE.WebGLRenderer({\n        antialias: true\n      });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.renderer.outputEncoding = THREE.sRGBEncoding;\n      this.container.appendChild(this.renderer.domElement); //\n      //   this.stats = new Stats();\n      //   this.container.appendChild(this.stats.dom);\n\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n    },\n    onWindowResize: function onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n    animate: function animate() {\n      var vertexpos = 0;\n      var colorpos = 0;\n      var numConnected = 0;\n\n      for (var i = 0; i < this.particleCount; i++) {\n        this.particlesData[i].numConnections = 0;\n      }\n\n      for (var i = 0; i < this.particleCount; i++) {\n        // get the particle\n        var particleData = this.particlesData[i];\n        this.particlePositions[i * 3] += particleData.velocity.x;\n        this.particlePositions[i * 3 + 1] += particleData.velocity.y;\n        this.particlePositions[i * 3 + 2] += particleData.velocity.z;\n        if (this.particlePositions[i * 3 + 1] < -this.rHalf || this.particlePositions[i * 3 + 1] > this.rHalf) particleData.velocity.y = -particleData.velocity.y;\n        if (this.particlePositions[i * 3] < -this.rHalf || this.particlePositions[i * 3] > this.rHalf) particleData.velocity.x = -particleData.velocity.x;\n        if (this.particlePositions[i * 3 + 2] < -this.rHalf || this.particlePositions[i * 3 + 2] > this.rHalf) particleData.velocity.z = -particleData.velocity.z;\n        if (this.effectController.limitConnections && particleData.numConnections >= this.effectController.maxConnections) continue; // Check collision\n\n        for (var j = i + 1; j < this.particleCount; j++) {\n          var particleDataB = this.particlesData[j];\n          if (this.effectController.limitConnections && particleDataB.numConnections >= this.effectController.maxConnections) continue;\n          var dx = this.particlePositions[i * 3] - this.particlePositions[j * 3];\n          var dy = this.particlePositions[i * 3 + 1] - this.particlePositions[j * 3 + 1];\n          var dz = this.particlePositions[i * 3 + 2] - this.particlePositions[j * 3 + 2];\n          var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n          if (dist < this.effectController.minDistance) {\n            particleData.numConnections++;\n            particleDataB.numConnections++;\n            var alpha = 1.0 - dist / this.effectController.minDistance;\n            this.positions[vertexpos++] = this.particlePositions[i * 3];\n            this.positions[vertexpos++] = this.particlePositions[i * 3 + 1];\n            this.positions[vertexpos++] = this.particlePositions[i * 3 + 2];\n            this.positions[vertexpos++] = this.particlePositions[j * 3];\n            this.positions[vertexpos++] = this.particlePositions[j * 3 + 1];\n            this.positions[vertexpos++] = this.particlePositions[j * 3 + 2];\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n            numConnected++;\n          }\n        }\n      }\n\n      this.linesMesh.geometry.setDrawRange(0, numConnected * 2);\n      this.linesMesh.geometry.attributes.position.needsUpdate = true;\n      this.linesMesh.geometry.attributes.color.needsUpdate = true;\n      this.pointCloud.geometry.attributes.position.needsUpdate = true;\n      requestAnimationFrame(this.animate); //   this.stats.update();\n\n      this.render();\n    },\n    render: function render() {\n      var time = Date.now() * 0.001;\n      this.group.rotation.y = time * 0.1;\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n    this.animate();\n  }\n};",{"version":3,"sources":["3d_ball.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"container\"></div>\n</template>\n\n<script>\nimport * as THREE from \"three\";\n// import Stats from \"./stats.module.js\";\n// import { GUI } from \"./dat.gui.module.js\";\n// import { OrbitControls } from './OrbitControls.js';\nimport { OBJLoader, MTLLoader } from \"three-obj-mtl-loader\";\n// import MTLLoader from  'three-mtl-loader';\n// import OBJLoader from  'three-obj-loader';\nimport { CSS2DRenderer, CSS2DObject } from \"three-css2drender\";\nconst OrbitControls = require(\"three-orbit-controls\")(THREE);\n\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      group: \"\",\n      container:\"\",\n      stats: \"\",\n      particlesData: [],\n      camera: \"\",\n      scene: \"\",\n      renderer: \"\",\n      positions:\"\",\n      colors: \"\",\n      particles: \"\",\n      pointCloud: \"\",\n      particlePositions: \"\",\n      linesMesh: \"\",\n      maxParticleCount: 1000,\n      particleCount: 300,\n      r: 800,\n      rHalf: 100 / 2,\n      effectController:{\n        showDots: false,\n        showLines: true,\n        minDistance: 150,\n        limitConnections: false,\n        maxConnections: 8,\n        particleCount: 345\n      }\n    }\n  },\n  methods: {\n    // initGUI(){\n    //   var gui = new GUI();\n\n    //   gui.add(this.effectController, this.effectController.showDots).onChange(function(value) {\n    //     pointCloud.visible = value;\n    //   });\n    //   gui.add(this.effectController, this.effectController.showLines).onChange(function(value) {\n    //     linesMesh.visible = value;\n    //   });\n    //   gui.add(this.effectController, this.effectController.minDistance, 10, 300);\n    //   gui.add(this.effectController, this.effectController.limitConnections);\n    //   gui.add(this.effectController, this.effectController.maxConnections, 0, 30, 1);\n    //   gui\n    //     .add(this.effectController, this.effectController.particleCount, 0, maxParticleCount, 1)\n    //     .onChange(function(value) {\n    //       particleCount = parseInt(value);\n    //       particles.setDrawRange(0, particleCount);\n    //     });\n    // },\n\n    init() {\n    //   this.initGUI();\n\n      this.container = document.getElementById(\"container\");\n\n      this.camera = new THREE.PerspectiveCamera(\n        60,\n        window.innerWidth / window.innerHeight,\n        1,\n        4000\n      );\n      this.camera.position.z = 2000;\n   \n      var controls = new OrbitControls(this.camera, this.container);\n\n      this.scene = new THREE.Scene();\n\n      this.group = new THREE.Group();\n      this.scene.add(this.group);\n\n      var helper = new THREE.BoxHelper(\n        new THREE.Mesh(new THREE.BoxBufferGeometry(this.r, this.r, this.r))\n      );\n      helper.material.color.setHex(0x101010);\n      helper.material.blending = THREE.AdditiveBlending;\n      helper.material.transparent = true;\n      this.group.add(helper);\n\n      var segments = this.maxParticleCount * this.maxParticleCount;\n\n      this.positions = new Float32Array(segments * 3);\n      this.colors = new Float32Array(segments * 3);\n\n      var pMaterial = new THREE.PointsMaterial({\n        color: 0x222222,\n        size: 3,\n        blending: THREE.AdditiveBlending,\n        transparent: true,\n        sizeAttenuation: false\n      });\n\n      this.particles = new THREE.BufferGeometry();\n      this.particlePositions = new Float32Array(this.maxParticleCount * 3);\n\n      for (var i = 0; i < this.maxParticleCount; i++) {\n        var x = Math.random() *this.r-this.r/ 2;\n        var y = Math.random() *this.r-this.r/ 2;\n        var z = Math.random() *this.r-this.r/ 2;\n\n        this.particlePositions[i * 3] = x;\n        this.particlePositions[i * 3 + 1] = y;\n        this.particlePositions[i * 3 + 2] = z;\n\n        // add it to the geometry\n        this.particlesData.push({\n          velocity: new THREE.Vector3(\n            -1 + Math.random() * 2,\n            -1 + Math.random() * 2,\n            -1 + Math.random() * 2\n          ),\n          numConnections: 0\n        });\n      }\n\n      this.particles.setDrawRange(0, this.particleCount);\n      this.particles.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(this.particlePositions, 3).setUsage(\n          THREE.DynamicDrawUsage\n        )\n      );\n\n      // create the particle system\n      this.pointCloud = new THREE.Points(this.particles, pMaterial);\n      this.group.add(this.pointCloud);\n\n      var geometry = new THREE.BufferGeometry();\n\n      geometry.setAttribute(\n        \"position\",\n        new THREE.BufferAttribute(this.positions, 3).setUsage(THREE.DynamicDrawUsage)\n      );\n      geometry.setAttribute(\n        \"color\",\n        new THREE.BufferAttribute(this.colors, 3).setUsage(THREE.DynamicDrawUsage)\n      );\n\n      geometry.computeBoundingSphere();\n\n      geometry.setDrawRange(0, 0);\n\n\n      var material = new THREE.LineBasicMaterial({\n        vertexColors: THREE.VertexColors,\n        blending: THREE.AdditiveBlending,\n        transparent: true\n      });\n\n      this.linesMesh = new THREE.LineSegments(geometry, material);\n      this.group.add(this.linesMesh);\n\n      //\n\n      this.renderer = new THREE.WebGLRenderer({ antialias: true });\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n      this.renderer.outputEncoding = THREE.sRGBEncoding;\n\n      this.container.appendChild(this.renderer.domElement);\n\n      //\n\n    //   this.stats = new Stats();\n    //   this.container.appendChild(this.stats.dom);\n\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n    },\n\n    onWindowResize() {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    },\n\n    animate() {\n      var vertexpos = 0;\n      var colorpos = 0;\n      var numConnected = 0;\n\n      for (var i = 0; i < this.particleCount; i++)\n        this.particlesData[i].numConnections = 0;\n\n      for (var i = 0; i < this.particleCount; i++) {\n        // get the particle\n        var particleData = this.particlesData[i];\n\n        this.particlePositions[i * 3] += particleData.velocity.x;\n        this.particlePositions[i * 3 + 1] += particleData.velocity.y;\n        this.particlePositions[i * 3 + 2] += particleData.velocity.z;\n\n        if (\n          this.particlePositions[i * 3 + 1] < -this.rHalf ||\n          this.particlePositions[i * 3 + 1] > this.rHalf\n        )\n          particleData.velocity.y = -particleData.velocity.y;\n\n        if (\n          this.particlePositions[i * 3] < -this.rHalf ||\n          this.particlePositions[i * 3] > this.rHalf\n        )\n          particleData.velocity.x = -particleData.velocity.x;\n\n        if (\n          this.particlePositions[i * 3 + 2] < -this.rHalf ||\n          this.particlePositions[i * 3 + 2] > this.rHalf\n        )\n          particleData.velocity.z = -particleData.velocity.z;\n\n        if (\n          this.effectController.limitConnections &&\n          particleData.numConnections >= this.effectController.maxConnections\n        )\n          continue;\n\n        // Check collision\n        for (var j = i + 1; j < this.particleCount; j++) {\n          var particleDataB = this.particlesData[j];\n          if (\n            this.effectController.limitConnections &&\n            particleDataB.numConnections >= this.effectController.maxConnections\n          )\n            continue;\n\n          var dx = this.particlePositions[i * 3] - this.particlePositions[j * 3];\n          var dy = this.particlePositions[i * 3 + 1] - this.particlePositions[j * 3 + 1];\n          var dz = this.particlePositions[i * 3 + 2] - this.particlePositions[j * 3 + 2];\n          var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);\n\n          if (dist < this.effectController.minDistance) {\n            particleData.numConnections++;\n            particleDataB.numConnections++;\n\n            var alpha = 1.0 - dist / this.effectController.minDistance;\n\n            this.positions[vertexpos++] = this.particlePositions[i * 3];\n            this.positions[vertexpos++] = this.particlePositions[i * 3 + 1];\n            this.positions[vertexpos++] = this.particlePositions[i * 3 + 2];\n\n            this.positions[vertexpos++] = this.particlePositions[j * 3];\n            this.positions[vertexpos++] = this.particlePositions[j * 3 + 1];\n            this.positions[vertexpos++] = this.particlePositions[j * 3 + 2];\n\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n            this.colors[colorpos++] = alpha;\n\n            numConnected++;\n          }\n        }\n      }\n\n      this.linesMesh.geometry.setDrawRange(0, numConnected * 2);\n      this.linesMesh.geometry.attributes.position.needsUpdate = true;\n      this.linesMesh.geometry.attributes.color.needsUpdate = true;\n\n      this.pointCloud.geometry.attributes.position.needsUpdate = true;\n\n      requestAnimationFrame(this.animate);\n\n    //   this.stats.update();\n      this.render();\n    },\n\n    render() {\n      var time = Date.now() * 0.001;\n\n      this.group.rotation.y = time * 0.1;\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  mounted() {\n    this.init()\n    this.animate()\n  }\n};\n</script>\n<style scoped>\n#container {\n  display: block;\n  width: 1000px;\n  height: 400px;\n  margin: 0 auto;\n  padding: 0;\n  overflow: hidden;\n}\n</style>"],"sourceRoot":"src/components"}]}